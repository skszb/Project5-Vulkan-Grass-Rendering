#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define HALF_PI 1.57079632679
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
    vec3 pos;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining
layout(set = 2, binding = 0) uniform BladeConstants 
{
    vec4 gravity;   // dir, acceleration
    uint totalBladeCount;
};

layout(set = 2, binding = 1) buffer Blades {
    Blade blades[];
};

layout(set = 2, binding = 2) buffer CulledBlades {
    Blade culledBlades[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
layout(set = 2, binding = 3) buffer NumBlades {
	  uint vertexCount;   // Write the number of blades remaining here
	  uint instanceCount; // = 1
	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}



void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    uint bladeID =  gl_GlobalInvocationID.x;
    if (bladeID >= totalBladeCount) { return; }

    // Unpack the blade data
    Blade blade = blades[bladeID];
    vec3 v0 = blade.v0.xyz; 
    float rotation = blade.v0.w;
    vec3 v1 = blade.v1.xyz; 
    float height = blade.v1.w;
    vec3 v2 = blade.v2.xyz; 
    float width = blade.v2.w;
    vec3 up = blade.up.xyz; 
    float stiffness = blade.up.w;

    vec3 front = vec3(cos(rotation + HALF_PI), 0, sin(rotation + HALF_PI));
    vec3 side = vec3(cos(rotation), 0, sin(rotation));
    
    // Theoretically (and in the correct way) we need to transform the gravity to local space, 
    // but since the current implementation uses a fixed identity model matrix , we skip it for now.
    vec3 gravity_dir = gravity.xyz;                 
    float gravitational_acceleration = gravity.w;

    // Calculate forces
    // Recovery force
    vec3 v2_i = v0 + up * height;
    vec3 f_recovery = (v2_i - v2) * stiffness;
    
    // Gravitational force
    float mass = 1.f;
    vec3 f_gEnv = mass * gravity_dir * gravitational_acceleration;
    vec3 f_gFront = 0.25 * front * length(f_gEnv);
    vec3 f_g = f_gEnv + f_gFront;

    // TODO: Wind


    vec3 translation = deltaTime * (f_recovery + f_g);
    // translation = deltaTime * (f_g);
    v2 += translation;


    // State validation
    v2 = v2 - up * min(dot(up, v2 - v0), 0);

    vec3 v2_v0 = v2 - v0;
    float lProj = length(v2_v0 - up * dot(v2_v0, up));

    float lProjDivHeight = lProj / height;
    v1 = v0 + height * up * max(1 - lProjDivHeight, 0.05 * max(lProjDivHeight, 1));

    float L = (2 * distance(v2, v0) + (distance(v0, v1) + distance(v1, v2))) / 3.f;
    float r = height / L;

    vec3 v1_corrected = v0 + r * (v1 - v0);
    vec3 v2_corrected = v1_corrected + r * (v2 - v1);

    blade.v1.xyz = v1_corrected;
    blade.v2.xyz = v2_corrected;


    blades[bladeID] = blade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    bool visible = true;
    
    // Orientation culling 
    vec3 viewDir = normalize((camera.pos - v0));
    const float orientationCullThreshold = 0.9;
    if (pow(dot(viewDir, side), 2) > orientationCullThreshold * orientationCullThreshold) {
        visible = false;
    }

    if (visible)
    {
        uint idx = atomicAdd(numBlades.vertexCount, 1);
        culledBlades[idx] = blade;
    }
}

